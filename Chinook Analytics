--Create a list of all employees and the contact info of whom they report to in case they have questions or concerns. 
SELECT (a.FirstName || ' ' || a.LastName) AS [Employee Name], (b.FirstName || ' ' || b.LastName) AS [Reports to], b.Title, b.Phone, b.fax, b.Email
FROM employees a
LEFT JOIN employees b
ON a.ReportsTo = b.EmployeeId;



--Show the employees who are Sales Agents.

SELECT FirstName, LastName, Title
FROM employees
WHERE Title LIKE 'Sales%Agent';



/* 
Calculate a performance report on sales agents. 
Report contains a sales agent's sales by year compared to the average sales from all sales agents that year 
and includes the lifetime sales to track overall performance. 
This report may help with decision making for promotion considerations or if further training is needed to boost sales. 
/*

WITH cte_totals AS 
(
SELECT e.FirstName, e.LastName, ROUND(SUM(i.Total),2) AS [Agent Sales],
CASE
WHEN invoicedate like '2009%' THEN '2009'
WHEN invoicedate like '2010%' THEN '2010'
WHEN invoicedate like '2011%' THEN '2011'
WHEN invoicedate like '2012%' THEN '2012'
WHEN invoicedate like '2013%' THEN '2013'
END AS Year
FROM employees e
JOIN customers c
ON e.EmployeeId = c.SupportRepId
JOIN invoices i
USING (CustomerId)
WHERE e.Title LIKE 'Sales%Agent'
GROUP BY Year, e.FirstName
ORDER BY e.FirstName, Year
)
SELECT FirstName, LastName, Year, [Agent Sales], ROUND(AVG([Agent Sales]) OVER (PARTITION BY Year),2) AS [Average Agent Sales], 
ROUND(SUM([Agent Sales]) OVER (PARTITION BY FirstName),2) AS [Lifetime Sales]
FROM cte_totals
ORDER BY FirstName, Year;



--Create a list of managers to send a copy of the performance report.

SELECT FirstName, LastName, Title, Phone, Fax, Email
From employees 
WHERE Title = 'General Manager' 
OR
Title = 'Sales Manager'







/*
What are the total invoices and profits for each year? 
This will benefit stackholders to see if progress has been made over the years and open a conversation for improvements.
/*

SELECT COUNT(invoiceId) AS [Total Invoices], ROUND(SUM(Total),2) AS [Total Profits],
CASE
WHEN invoicedate like '2009%' THEN '2009'
WHEN invoicedate like '2010%' THEN '2010'
WHEN invoicedate like '2011%' THEN '2011'
WHEN invoicedate like '2012%' THEN '2012'
WHEN invoicedate like '2013%' THEN '2013'
END AS 'Year'
FROM invoices 
GROUP BY Year
ORDER BY Year;



--Find a unique list of countries that have purchased tracks from the Invoice table.

SELECT DISTINCT BillingCountry
FROM invoices;



--Show the countries that have bought over 150 tracks. These are the top 5 countries to consider when reviewing stats. 

SELECT c.Country, SUM(item.Quantity) AS [Total Tracks]
FROM invoice_items item
JOIN invoices i
USING (InvoiceId)
JOIN Customers c
USING (CustomerId)
GROUP BY c.Country
HAVING SUM(item.Quantity) > 150
ORDER BY [Total Tracks] desc;



/*
Show only customers who spend above the average amount per customer and the country in which they reside. 
This query may assist in further investigation of loyal customers' likes and preferances. 
/*

WITH cte_CustomerTotal AS
(
SELECT c.CustomerId, c.FirstName, c.LastName, SUM(i.Total) AS [Total Spent], c.Country
FROM Invoices i
JOIN Customers c
USING (CustomerId)
GROUP BY c.CustomerId
)
SELECT FirstName, LastName, [Total Spent], (SELECT ROUND(AVG([Total Spent]),2) FROM cte_CustomerTotal) AS [Average Spent by Customer], Country
FROM cte_CustomerTotal
GROUP BY customerId
HAVING [Total Spent] >= (SELECT AVG([Total Spent]) FROM cte_CustomerTotal)
ORDER BY [Total Spent] desc;



-- What's the total amount spent per country?

SELECT c.Country, ROUND(SUM(i.total),2) AS Total_Spent
FROM Customers c
JOIN invoices i
USING (CustomerId)
GROUP BY c.Country
ORDER BY Total_Spent desc;



--Create a temp table combining tracks, albums, artists, genres, and media_types tables.

DROP TABLE IF EXISTS Temp_TrackDetails;
CREATE TEMP TABLE Temp_TrackDetails 
(
TrackId INT,
Track varchar(50),
Album varchar(50),
Artist varchar(50),
Genre varchar(50),
MediaType varchar(50)
);

INSERT INTO Temp_TrackDetails
SELECT t.TrackId, t.Name AS [Track], al.Title AS [Album], a.Name AS [Artist], g.Name AS [Genre], mt.Name AS [Media Type]
FROM artists a
JOIN albums al
USING (ArtistId)
JOIN tracks t
USING (AlbumId)
JOIN media_types mt
USING (MediaTypeId)
JOIN genres g
USING (GenreId);


--List genres by most popular to least popular and how many tracks are available in that genre.  

WITH cte_GenrePurchased AS 
(
SELECT SUM(i.Quantity) AS [Purchased Tracks], t.Genre 
FROM invoice_items i
LEFT JOIN Temp_TrackDetails t
USING(TrackId)
GROUP BY t.Genre
ORDER BY SUM(i.Quantity) desc
),
cte_GenreTotal AS
(
SELECT COUNT(*) [Available Tracks], Genre
FROM Temp_TrackDetails
GROUP BY Genre
ORDER BY COUNT(*) desc
)
SELECT gp.[Purchased Tracks], gt.[Available Tracks], gt.Genre
FROM cte_GenrePurchased gp
RIGHT JOIN cte_GenreTotal gt
USING(Genre);

/* 
List the most popular to least popular genres for each country to help stackholders 
decide what tracks or artists to add to maximize profits.
/*

SELECT c.Country, t.Genre, COUNT(t.Genre) AS [Purchased]
FROM invoices i
LEFT JOIN customers c 
USING (CustomerId)
JOIN invoice_items item
USING (InvoiceId)
LEFT JOIN Temp_TrackDetails t
USING(TrackId)
GROUP BY t.Genre, c.Country
ORDER BY Country, COUNT(t.Genre) desc;



/*
List the total number of songs sold by artist and how many tracks are available in the database 
to determine if more tracks should be added for a respective artist.
/*

WITH cte_sold AS 
(
SELECT SUM(i.Quantity) AS [Total Tracks Sold], t.Artist
FROM invoice_items i
LEFT JOIN Temp_TrackDetails t
USING (TrackId)
GROUP BY t.Artist
ORDER BY SUM(i.Quantity) desc
),
 cte_total AS 
(
SELECT COUNT(*) AS [Available Tracks], Artist
FROM Temp_TrackDetails
GROUP BY Artist
ORDER BY COUNT(*) desc
)

SELECT s.[Total Tracks Sold], t.[Available Tracks], t.Artist
FROM cte_sold s
FULL JOIN cte_total t
USING(Artist)
ORDER BY [Total Tracks Sold] desc;

